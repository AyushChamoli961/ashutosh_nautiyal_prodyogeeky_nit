generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum clubs {
  web
  mob
  ui
}
model User {
<<<<<<< HEAD
  id       String          @id @default(auto()) @map("_id") @db.ObjectId
  userId   String          @unique
  email    String          @unique
  name     String?
  clubName String?
  clubs    UserWithClubs[]
=======
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String  @unique
  email  String  @unique
  name   String?
  clubName String?
  clubs  UserWithClubs[]
}

model Event {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  date          DateTime
  location      String
  club          Club            @relation(fields: [clubId], references: [id])
  clubId        String          @db.ObjectId // This field establishes the relationship with the Club model
>>>>>>> 641dd606554b0d40b07c88cc9d3eebad4327a497
}

model Club {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String          @unique
  description   String
  events        Event[]         // Define a relation to the Event model
  president     String?
  vicePresident String?
  secretary     String?
  members       UserWithClubs[]
}

model UserWithClubs {
<<<<<<< HEAD
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user User? @relation(fields: [userId], references: [userId])

  club      Club?    @relation(fields: [clubId], references: [id])
  userId    String   @unique
  clubId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Admin {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  email    String @unique
  password String
}


model Event {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  date          String
  location      String
  club          Club            @relation(fields: [clubId], references: [id])
  clubId        String          @db.ObjectId // This field establishes the relationship with the Club model
  description String?
=======
  id       String   @id @default(auto()) @map("_id") @db.ObjectId

  user     User?    @relation(fields: [userId], references: [userId])

  club     Club?     @relation(fields: [clubId], references: [id])
  userId   String   @unique
  clubId   String   @db.ObjectId 
  createdAt DateTime @default(now())
}


model Admin {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  email    String  @unique
  password String 
>>>>>>> 641dd606554b0d40b07c88cc9d3eebad4327a497
}